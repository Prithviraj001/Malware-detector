using System;
using System.Windows;
using System.IO;
using System.Data.OleDb;
using System.Data;
using System.Windows.Forms;
using try1;
using System.Threading;
using System.ComponentModel;
using System.Diagnostics;

namespace WpfApp1
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        OleDbCommand cmd;
        OleDbConnection con;
        OleDbDataReader reader;
        byte[] buffer;
        string fp;
        string filename;        
        string base64Encoded;
        string hexdump,folder=null;
        bool vir=false;
        int progres=0;
        BackgroundWorker worker = new BackgroundWorker();
        public MainWindow()
        {
            InitializeComponent();
            con = new OleDbConnection
            {
                ConnectionString = "Provider=Microsoft.Jet.Oledb.4.0; Data Source=" + AppDomain.CurrentDomain.BaseDirectory + "\\hi.mdb"
            };
            log.Visibility =System.Windows.Visibility.Hidden;
            lab.Visibility = System.Windows.Visibility.Hidden;
            pbStatus.Visibility = System.Windows.Visibility.Hidden;
            cmd = new OleDbCommand();
            if (con.State != ConnectionState.Open)
                con.Open();
            cmd.Connection = con;

            ProgressBar progressBar = new ProgressBar();
            progressBar.Value = 20;

            worker.WorkerReportsProgress = true;
            //worker.DoWork += worker_DoWork;
            worker.ProgressChanged += worker_ProgressChanged;
            //worker.RunWorkerAsync(hexdump);
        }
        void worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            pbStatus.Value = e.ProgressPercentage;
        }

        private void Window_ContentRendered(object sender, EventArgs e)
        {
            pbStatus.Value += progres;

        }

        private void convert(string temp)
        {
            buffer = File.ReadAllBytes(temp);
            
            base64Encoded = Convert.ToBase64String(buffer);
            //s = base64Encoded.Split('-');
            //sp = String.Join("", s);
            hexdump = (base64Encoded.ToLower());
        }

        private void check(string val)
        {
            cmd.CommandText = "select * from sheet1";
            reader = cmd.ExecuteReader();
            string susd;
            while (reader.Read())
            {
                susd = reader.GetString(1);
                susd = susd.Substring(5);
                worker.ReportProgress(progres);
                if (val.Contains(susd))
                {
                    vir=true;
                    break;

                }
              
            }
            reader.Close();
        }

        private void Scan_Click(object sender, RoutedEventArgs e)
        {
            pbStatus.Visibility = System.Windows.Visibility.Visible;
            lab.Visibility = System.Windows.Visibility.Visible;
            this.Title = " Scanning...";           
            string[] dr = Environment.GetLogicalDrives();
            for(int i=0;i<dr.Length;i++)
            {
                scanFiles(dr[i]);

            }
            this.Title = "Done☺";
            log.Visibility = System.Windows.Visibility.Visible;
 

        }



        private void scanFiles(string rootDirectory)
        {
            try
            {
                foreach (string dir in Directory.GetDirectories(rootDirectory))
                {
                    if (dir.ToLower().IndexOf("$recycle.bin") == -1)
                        scanFiles(dir); //recursive call
                }
                foreach (string file in Directory.GetFiles(rootDirectory))
                {
                    convert(file);
                    vir = false;
                    //pbStatus.Value = 50;
                    check(hexdump);
                    pbStatus.Value = 100;
                    if (vir)
                    {
                        pbStatus.Value += progres;
                        System.Windows.MessageBox.Show("Virus found in " + Path.GetFileName(file));

                    }
                   // else
                    //{
                      //  System.Windows.MessageBox.Show("Virus not found " + file);
                    //}
                }
            }
            catch (Exception)
            {
            }
        }



        private void Button_Click_3(object sender, RoutedEventArgs e)
        {
            pbStatus.Value = 0;
            pbStatus.Visibility = System.Windows.Visibility.Visible;
            lab.Visibility = System.Windows.Visibility.Visible;
            var dialog = new System.Windows.Forms.FolderBrowserDialog();
            dialog.Description = "Select folder to Scan";
            System.Windows.Forms.DialogResult result = dialog.ShowDialog();
            
            folder = dialog.SelectedPath;
            
            if (folder != "")
            {
                this.Title = "Scanning..";
                string[] files = Directory.GetFiles(folder, "*.*", SearchOption.AllDirectories);
                //string root = Path.Get(folder);
                //System.Windows.MessageBox.Show(root);
                
                for (int i = 0; i < files.Length; i++)
                {
                    progres = Convert.ToInt32(((double)i / files.Length) * 100);
                    fp = Convert.ToString(files[i]);
                    convert(fp);
                    vir = false;                   
                    check(hexdump);
                    worker.ReportProgress(progres, i);
                    pbStatus.Value += progres;
                    if (vir)
                    {
                        System.Windows.MessageBox.Show("Virus found in " + Path.GetFileName(fp));
                        StreamWriter sw = new StreamWriter("e:\\Infected files.log", false);
                        sw.WriteLine(fp);
                        //sw.WriteLineAsync(fp);
                        sw.Write('\n');
                        sw.Close();
                    }
                    System.Threading.Thread.Sleep(1);

                    /*else
                    {
                        System.Windows.MessageBox.Show("Virus not found " + Path.GetFileName(fp));
                    }*/
                }
                this.Title = "Done ☺♥ ";
                log.Visibility = System.Windows.Visibility.Visible;

            }
            
           
        }

        private void log_Click(object sender, RoutedEventArgs e)
        {
            //try1 tr = new try1;
            Form1 form1 = new Form1(folder);
            //this.Hide();
            form1.Show();

            //Process.Start("e:\\Infected files.log");
            
         }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            pbStatus.Value = 0;
            Microsoft.Win32.OpenFileDialog openFileDialog1 = new Microsoft.Win32.OpenFileDialog();
            openFileDialog1.InitialDirectory = @"e:\";
            openFileDialog1.Title = "Select a file to scan";
            openFileDialog1.CheckFileExists = true;
            openFileDialog1.CheckPathExists = true;
            openFileDialog1.DefaultExt = ".exe";
            openFileDialog1.Filter = "Executable files (*.exe)|*.exe|All files (*.*)|*.*";
            openFileDialog1.FilterIndex = 2;
            openFileDialog1.RestoreDirectory = true;
            openFileDialog1.ReadOnlyChecked = true;
            openFileDialog1.ShowReadOnly = true;
            if (openFileDialog1.ShowDialog() == true)
            {
                filename = openFileDialog1.FileName;
                convert(filename);
                pbStatus.Value = 50;
                check(hexdump);
                pbStatus.Value = 100;
                if (vir)
                {
                    System.Windows.MessageBox.Show("Virus found in" + Path.GetFileName(filename));
            
                }
                else
                {
                    System.Windows.MessageBox.Show("Virus not found " + filename);
                }
            }


        }
        

    }
}
